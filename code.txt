/: 时间 
ungroup{
	str(1)
	rand{0-2}
	or
	str(0).zeon
	rand{1-9}
}
str(:)
rand{0-5}
num
str(:)
rand{0-5}
num
:/
/: 手机号 :/ 
/: ungroup{
	ungroup{
		str(+)
		or
		str(00)
	}
	str(86)
}.zeon
str(1)
rand{3-9}
num.exact[9]
:/
/: URL :/
/: begin
ungroup{						// 创建一个分组，最多出现一次
	str(http)					// 匹配精确字符串‘http’
	str(s).zeon				// 匹配精确字符串‘s’，最多出现一次
	str(:\%//)					// 匹配精确字符串‘://’
}.zeon
rand{lett num}					// 匹配任意一个字母或数字
rand{- lett num}.exact[0, 62]		// 匹配给定字符组{- 字母 数字}中任意一个字符，设定精确出现次数[0, 62]
ungroup{						// 创建一个分组，出现一次或多次
	str(.)						// 匹配精确字符串‘.’
	rand{lett num}				// 匹配任意一个字母或数字
	rand{- lett num}.exact[0, 62]	// 匹配给定字符组{- 字母 数字}中任意一个字符，设定精确出现次数[0, 62]
}.onmo
end
:/
/:
	文案
	正则表达式是很多开发者都熟悉的工具，它在从字符串、文章或者 HTML 文档里提取需要的文本时挺有用的。不管是 Python 里的“re”库，还是 JavaScript 里的字面量，大多数编程语言都能使用正则表达式。不过有意思的是，当一个问题看着好像能用正则表达式解决的时候，往往意味着你面临两个问题：一个是原来的问题，另一个是怎么正确构建和应用正则表达式。

正则表达式是由一些字符和特殊符号组成的，这些元素规定了搜索的模式。对初学者来说，这些符号可能比较抽象，不好记住，所以要写出能满足需求的正则表达式就挺难的。每次要用正则表达式的时候，可能常常都得一边查资料一边写代码，这样不仅编码效率不高，还容易出错。虽然可以找 AI 帮忙，但是如果对正则表达式的规则没有基本的了解，那理解和调整 AI 给出的解决方案也挺有难度的。

为了解决这个难题呢，我设计了一种新的工具叫 Regular Simpified Expression（RSE）。RTE 它用了一些容易记住的关键字和范围符，比如“begin”“end”“rand{}”等等。这些关键字能很直观地体现它们的功能，像“begin”可以用来匹配字符串或者行的开头，“end”就表示结尾。用这些关键字，就算不是大佬也能很快写出正确又容易理解的 RTE 代码。然后，用专门的 RTE 编译器把 RTE 转换成标准的正则表达式，之后就能很方便地用正则表达式去执行各种文本处理任务啦。这种方法大大简化了正则表达式的创建过程，还能减少出错的几率呢。
:/
str(<)
group content{
   unrand{str(>)}.zemo
}
str(>)